generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  username      String      @unique
  fullName      String
  email         String      @unique
  emailVerified Boolean     @default(false)
  phoneNumber   String?
  provider      String
  avatar        String      @default("")
  password      String
  active        Boolean     @default(true)
  twoFA         Boolean     @default(false)
  isAdmin       Boolean     @default(false)
  isDeleted     Boolean     @default(false)
  createdDate   DateTime    @default(now())
  updatedDate   DateTime?
  lastLoginDate DateTime    @default(now())
  orgMember     OrgMember[]
}

model OrgMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  isOwner        Boolean
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
}

model Organization {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  members            OrgMember[]
  active             Boolean            @default(true)
  isDeleted          Boolean            @default(false)
  products           Product[]
  transactionsAmount Int                @default(0)
  balance            Float              @default(0)
  createdDate        DateTime           @default(now())
  updatedDate        DateTime?
  PendingOrgMember   PendingOrgMember[]
}

model PendingOrgMember {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  email           String
  invitationToken String       @unique
  expiredDate     DateTime
  createdDate     DateTime     @default(now())
  updatedDate     DateTime?
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String       @db.ObjectId
}

model Product {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String       @default("")
  price          Float
  detail         String
  active         Boolean      @default(true)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  createdDate    DateTime     @default(now())
  updatedDate    DateTime?
}

model Pricing {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  amount            String
  active            Boolean   @default(true)
  public            Boolean   @default(false)
  transactionAmount Int
  createdDate       DateTime  @default(now())
  updatedDate       DateTime?
}

model BankTransaction {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  code         String
  amount       String
  recieved     Boolean   @default(false)
  createdDate  DateTime  @default(now())
  recievedDate DateTime?
}

model BankInformation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  accountNo   String
  accountName String
  acqId       String
  createdDate DateTime  @default(now())
  updatedDate DateTime?
}
